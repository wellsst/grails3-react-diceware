buildscript {

    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.moowork.gradle:gradle-node-plugin:0.13"
        classpath "org.grails.plugins:hibernate5:${gormVersion - ".RELEASE"}"
        classpath "org.grails.plugins:views-gradle:1.2.9"
        classpath 'com.bertramlabs.plugins:asset-pipeline-gradle:2.1.1'
    }
}
plugins {
    id "io.spring.dependency-management" version "0.4.0.RELEASE"
}

version "1"
group "grails3.react.diceware"

apply plugin: "spring-boot"
apply plugin: "asset-pipeline"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "war"
apply plugin: "org.grails.grails-web"
apply plugin: "com.moowork.node"
apply plugin: "org.grails.plugins.views-json"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-codecs"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-datasource"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.16.Final"
    compile "org.grails.plugins:views-json"
    compile "org.grails.plugins:views-json-templates"
    console "org.grails:grails-console"
    profile "org.grails.profiles:react"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "com.h2database:h2"
    runtime "org.apache.tomcat:tomcat-jdbc"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-datastore-rest-client"
    testCompile "org.grails:grails-web-testing-support"

    //compile "org.grails.plugins:gorm-graphql:1.0.2"
    compile "org.grails.plugins:gorm-graphql:1.0.3.BUILD-SNAPSHOT"
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.2'

    // For deployment
    compile 'org.eclipse.jetty:jetty-runner:9.2.11.v20150529'
    // compile 'com.github.jsimone:webapp-runner:8.5.11.3'
    provided "org.springframework.boot:spring-boot-starter-tomcat"
    //compile "org.grails:grails-dependencies"

}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

task stage() {
    dependsOn clean, war
}
// build.mustRunAfter clean
war.mustRunAfter clean

task copyToLib(type: Copy) {
    into "$buildDir/server"
    from(configurations.compile) {
        include "webapp-runner*"
    }
}
stage.dependsOn(copyToLib)

war.dependsOn(':client:buildClient')
war {
    baseName = 'diceware'    // otherwise this is 'server'
    version = project.version
    // + '.' + System.currentTimeMillis();   // I simply prefer to append a ms timestamp in case I've run multiple builds

    // Finally, include the files from the client:
    from('../client/build') {
        include '**/*'
    }
}

stage.dependsOn(copyToLib)

tasks.stage.doLast() {
    delete fileTree(dir: "build/distributions")
    delete fileTree(dir: "build/assetCompile")
    delete fileTree(dir: "build/distributions")
    delete fileTree(dir: "build/libs", exclude: "*.war")
}

